parameters:
  - name: sourceCodeDirectory
    displayName: path to the application source code
    type: string
  - name: artifactName
    displayName: Name of the artifact to publish
    type: string
  - name: dotnetCoreVersion
    displayName: Dotnet Core version to use
    type: string
  - name: buildConfiguration
    displayName: Name of the build configuration to use
    type: string

steps:
  - task: UseDotNet@2
    displayName: 'Install dotnet core ${{ parameters.dotnetCoreVersion }}'
    inputs:
      version: ${{ parameters.dotnetCoreVersion }}
  - task: DotNetCoreCLI@2
    displayName: 'Build with configuration "${{ parameters.buildConfiguration }}"'
    inputs:
      command: 'build'
      projects: '${{ parameters.sourceCodeDirectory }}/**/**/*.csproj'
      arguments: '--configuration ${{ parameters.buildConfiguration }}'
  - task: DotNetCoreCLI@2
    displayName: 'Test'
    inputs:
      command: test
      projects: '${{ parameters.sourceCodeDirectory }}/**/*.Test*.csproj'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --collect "XPlat Code Coverage"'
  # - script: 'dotnet tool update --ignore-failed-sources --global dotnet-reportgenerator-globaltool'  
  #   displayName: 'Install ReportGenerator tool'
  # - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura;Badges" -assemblyfilters:"-*.DataAccess;-*.Api;-*.Test*;-*.Repository;-*.Model;"'
  #   displayName: 'Create reports'
  # - task: PublishCodeCoverageResults@1  
  #   displayName: 'Publish code coverage'  
  #   inputs:  
  #     codeCoverageTool: Cobertura  
  #     summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'  
  # - task: DotNetCoreCLI@2
  #   displayName: 'Create package'
  #   inputs:
  #     command: publish
  #     ${{ if eq(parameters.artifactName, 'webappPackage') }}:
  #       publishWebProjects: true
  #     ${{ if ne(parameters.artifactName, 'webappPackage') }}:
  #       projects: '${{ parameters.sourceCodeDirectory }}/**/*.csproj'
  #       publishWebProjects: False
  #       modifyOutputPath: True
  #     arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)/${{ parameters.sourceCodeDirectory }}' 
  #     zipAfterPublish: True
  # - task: PublishBuildArtifacts@1
  #   displayName: 'Publish package'
  #   inputs:
  #     pathtoPublish: '$(Build.ArtifactStagingDirectory)/${{ parameters.sourceCodeDirectory }}'
  #     artifactName: ${{ parameters.artifactName }}